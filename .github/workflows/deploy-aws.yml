name: Deploy to AWS ECS

on:
  workflow_run:
    workflows: ["Publicar Imagem Docker no Docker Hub"]
    types:
      - completed

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/fcg

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Baixar definição da Task atual do ECS
        run: |
          aws ecs describe-task-definition \
            --task-definition TKS-FIAP-AWS-ESC-Fiap \
            --query "taskDefinition" > task-definition.json

      - name: Atualizar imagem no JSON
        run: |
          jq '.containerDefinitions[0].image = "${{ env.IMAGE_NAME }}:latest" |
              del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
              task-definition.json > new-task-definition.json

      - name: Registrar nova definição de Task
        id: register
        run: |
          arn=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json \
            --query "taskDefinition.taskDefinitionArn" --output text)
          echo "taskDefinitionArn=$arn" >> $GITHUB_OUTPUT

      - name: Atualizar o serviço ECS
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition ${{ steps.register.outputs.taskDefinitionArn }} \
            --force-new-deployment